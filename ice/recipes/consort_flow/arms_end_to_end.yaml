- name: "1. Arms baseline (a): Search for top paragraph, then answer based on that paragraph."
  results_json: "experiments/results/consort/arms/01_baseline.json"
  args:
    split: validation
    method: ice.recipes.meta.eval_paper_qa.common_baselines.paper_qa_baseline_str_answer
    paper_qa_generator: ice.recipes.consort_flow.generate_questions.generate_arms_qas_str
    answer_eval_method: ice.recipes.meta.eval_paper_qa.quick_question_driven_eval.quick_eval
    classification_eval_method: ice.recipes.meta.eval_paper_qa.common_eval_methods.eval_text_classification
- name: "1. Arms baseline (b): Same as (1), but add an enumeration step that converts the answer to a numbered list (since downstream consort questions assume this)"
  results_json: "experiments/results/consort/arms/01_baseline_with_enumeration.json"
  args:
    method: ice.recipes.meta.eval_paper_qa.common_baselines.paper_qa_baseline_list_answer
    paper_qa_generator: ice.recipes.consort_flow.generate_questions.generate_arms_qas_lst
    answer_eval_method: ice.recipes.meta.eval_paper_qa.common_eval_methods.eval_sequence_gen
    # Note: All methods below generate numbered lists; only the first baseline does not do this
- name: "2. Arms: Classify each paragraph, then use as many paragraphs classified as relevant as fit into the prompt, answer based on those paragraphs."
  results_json: "experiments/results/consort/arms/02_elicit_style_classification_then_answer.json"
  pr_curve: "experiments/results/consort/arms/arms_search_elicit_pr.png"
  args:
    method: ice.recipes.consort_flow.baselines.zero_shot_arms_into_answer
- name: "3. Arms: Classify as in (2), prune with handwritten few-shot reasoning prompt (keeping at most 7 paragraphs), then answer based on the remaining paragraphs."
  results_json: "experiments/results/consort/arms/03_elicit_style_classification_pruning_then_answer.json"
  args:
    method: ice.recipes.consort_flow.baselines.elicit_prune_arms_reasoning_answer
- name: "4. Arms: Use automatically generated few-shot classification variant, then answer based on those paragraphs."
  results_json: "experiments/results/consort/arms/04_few_shot_classification_then_answer.json"
  pr_curve: "experiments/results/consort/arms/arms_few_shot_pr.png"
  args:
    method: ice.recipes.consort_flow.baselines.few_shot_arms_into_answer
- name: "5. Arms: Classify as in (4), prune with handwritten few-shot reasoning prompt (keeping at most 7 paragraphs), then answer based on the remaining paragraphs."
  results_json: "experiments/results/consort/arms/05_few_shot_classification_pruning_then_answer.json"
  args:
    method: ice.recipes.consort_flow.baselines.few_shot_arms_prune_reasoning_answer
- name: "6: Arms: Classify as in (2), don't prune, answer based with automatically-generated few-shot examples."
  results_json: "experiments/results/consort/arms/06_few_shot_classification_then_answer_with_few_shot.json"
  args:
    method: ice.recipes.consort_flow.baselines.zero_shot_arms_few_shot_answer
- name: "7. Arms: Classify as in (2), don't prune, decontext selections, then answer based on the decontexted paragraphs."
  results_json: "experiments/results/consort/arms/07_few_shot_classification_decontext_then_answer.json"
  args:
    method: ice.recipes.consort_flow.baselines.zero_shot_arms_decontext_then_answer
- name: "8. Arms: Classify as in (2), don't prune, decontext selections, then answer with automatically-generated few-shot examples."
  results_json: "experiments/results/consort/arms/08_zero_shot_classification_decontext_with_few_shot.json"
  args:
    method: ice.recipes.consort_flow.baselines.zero_shot_arms_decontext_few_shot_answer
